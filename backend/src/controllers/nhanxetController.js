const { pool, sql } = require("../config/db");

exports.getCommentsByPostId = async (req, res) => {
  const { id } = req.params;  // L·∫•y ID b√†i vi·∫øt t·ª´ URL

  try {
    const result = await pool
      .request()
      .input("MaBV", sql.Int, id)
      .query(`
        SELECT n.ID, n.NoiDung, n.NgayTao,N.MaTK, u.HoTen
        FROM NHANXET n
        JOIN USERS u ON n.MaTK = u.ID
        WHERE n.MaBV = @MaBV
        ORDER BY n.NgayTao DESC
      `);

    if (result.recordset.length === 0) {
      return res.status(404).json({ message: "Ch∆∞a c√≥ nh·∫≠n x√©t" });
    }

    // Tr·∫£ v·ªÅ d·ªØ li·ªáu nh·∫≠n x√©t
    res.json(result.recordset);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y nh·∫≠n x√©t:", err);
    res.status(500).json({ message: "L·ªói khi l·∫•y nh·∫≠n x√©t" });
  }
};

exports.postComment = async (req, res) => {
  const { id } = req.params; // b√†i vi·∫øt
  const { noiDung, tenNguoiDung } = req.body; // T√™n ng∆∞·ªùi b√¨nh lu·∫≠n v√† n·ªôi dung nh·∫≠n x√©t
  const user = req.user; // t·ª´ middleware verifyToken

  if (!noiDung?.trim()) {
    return res.status(400).json({ message: "N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
  }

  try {
    await pool
      .request()
      .input("NoiDung", noiDung)
      .input("MaBV", id)
      .input("MaTK", user.id)
      .input("TenNguoiDung", tenNguoiDung)
      .query(`
        INSERT INTO NHANXET (NoiDung, MaBV, MaTK, TenNguoiDung)
        VALUES (@NoiDung, @MaBV, @MaTK, @TenNguoiDung)
      `);

    res.status(201).json({ message: "ƒê√£ th√™m nh·∫≠n x√©t" });
  } catch (err) {
    console.error("‚ùå L·ªói khi th√™m nh·∫≠n x√©t:", err);
    res.status(500).json({ message: "L·ªói khi th√™m nh·∫≠n x√©t" });
  }
};
exports.deleteComment = async (req, res) => {
  const { id } = req.params; // ID c·ªßa nh·∫≠n x√©t
  


  const user = req.user;
console.log("üë§ User t·ª´ token:", user);

  try {
    // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ quy·ªÅn xo√° hay kh√¥ng
    const check = await pool
      .request()
      .input("ID", sql.Int, id)
      .query("SELECT MaTK FROM NHANXET WHERE ID = @ID");

    if (check.recordset.length === 0) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nh·∫≠n x√©t" });
    }

    const comment = check.recordset[0];
    if (comment.MaTK !== user.id) {
      return res.status(403).json({ message: "Kh√¥ng c√≥ quy·ªÅn xo√° nh·∫≠n x√©t n√†y" });
    }

    // Xo√° nh·∫≠n x√©t
    await pool
      .request()
      .input("ID", sql.Int, id)
      .query("DELETE FROM NHANXET WHERE ID = @ID");

    res.json({ message: "ƒê√£ xo√° nh·∫≠n x√©t" });
  } catch (err) {
    console.error("‚ùå L·ªói khi xo√° nh·∫≠n x√©t:", err);
    res.status(500).json({ message: "L·ªói khi xo√° nh·∫≠n x√©t" });
  }
};

exports.updateComment = async (req, res) => {
  const { id } = req.params; // ID c·ªßa nh·∫≠n x√©t
  const user = req.user;
  console.log("üë§ User t·ª´ token:", user);

  const { noiDung } = req.body;

  if (!noiDung?.trim()) {
    return res.status(400).json({ message: "N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
  }

  try {
    // Ki·ªÉm tra quy·ªÅn s·ª≠a
    const check = await pool
      .request()
      .input("ID", sql.Int, id)
      .query("SELECT MaTK FROM NHANXET WHERE ID = @ID");

    if (check.recordset.length === 0) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nh·∫≠n x√©t" });
    }

    const comment = check.recordset[0];
    if (comment.MaTK !== user.id) {
      return res.status(403).json({ message: "Kh√¥ng c√≥ quy·ªÅn s·ª≠a nh·∫≠n x√©t n√†y" });
    }

    await pool
      .request()
      .input("ID", sql.Int, id)
      .input("NoiDung", noiDung)
      .query("UPDATE NHANXET SET NoiDung = @NoiDung WHERE ID = @ID");

    res.json({ message: "ƒê√£ c·∫≠p nh·∫≠t nh·∫≠n x√©t" });
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t nh·∫≠n x√©t:", err);
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t nh·∫≠n x√©t" });
  }
};
