import { useState } from "react";
import {
  View,
  Text,
  TextInput,
  Button,
  StyleSheet,
  Alert,
} from "react-native";
import * as DocumentPicker from "expo-document-picker";
import DateTimePicker from "@react-native-community/datetimepicker";
import { useLocalSearchParams, router } from "expo-router";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { green } from "react-native-reanimated/lib/typescript/Colors";

export default function TaoBaiVietScreen() {
  const { maLHP } = useLocalSearchParams();
  const [noiDung, setNoiDung] = useState("");
  const [hanNop, setHanNop] = useState(new Date());
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [file, setFile] = useState<any>(null);

  const handleFilePick = async () => {
    const result = await DocumentPicker.getDocumentAsync({ type: "*/*" });
    if (result.type === "success") {
      setFile(result);
    }
  };

  const handleSubmit = async () => {
    if (!noiDung) {
      Alert.alert("Thi·∫øu n·ªôi dung", "H√£y nh·∫≠p n·ªôi dung th√¥ng b√°o");
      return;
    }

    const payload = {
      TieuDe: "Th√¥ng b√°o l·ªõp h·ªçc",
      NoiDung: noiDung,
      LoaiBV: 0,
      MaLHP: parseInt(maLHP as string),
      MaCD: 1,
      GioKetThuc: new Date().toISOString(),
      NgayKetThuc: hanNop.toISOString(),
    };

    try {
      const token = await AsyncStorage.getItem("token");
      const res = await fetch("http://192.168.1.101:3000/baiviet/tao", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(payload),
      });

      const result = await res.json();
      console.log("‚û°Ô∏è status", res.status);
      if (res.ok) {
        Alert.alert("‚úÖ Th√†nh c√¥ng", "B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c t·∫°o", [
          { text: "OK", onPress: () => router.back() },
        ]);
      } else {
        Alert.alert("‚ùå Th·∫•t b·∫°i", result.message || "ƒê√£ x·∫£y ra l·ªói");
      }
    } catch (err) {
      console.error("L·ªói g·ª≠i b√†i:", err);
      Alert.alert("‚ùå L·ªói", "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß");
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.label}>Th√¥ng b√°o g√¨ ƒë√≥ cho l·ªõp</Text>
      <TextInput
        style={[styles.input, { height: 100 }]}
        value={noiDung}
        onChangeText={setNoiDung}
        multiline
      />

      <Button title="üìé Ch·ªçn t·ªáp ƒë√≠nh k√®m" onPress={handleFilePick} />
      {file && <Text style={{ marginTop: 8, color: "green" }}>üìÑ {file.name}</Text>}

      <View style={{ marginTop: 20 }}>
        <Button title="üì§ ƒêƒÉng b√†i" onPress={handleSubmit} />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#fff", padding: 16 },
  label: { fontWeight: "bold", marginTop: 10 },
  input: {
    borderWidth: 1,
    borderColor: "#ccc",
    padding: 8,
    borderRadius: 6,
    marginTop: 4,
  },
});
