import { useLocalSearchParams } from "expo-router";
import { useEffect, useState } from "react";
import { API_BASE_URL } from "@/constants/api";
import { router } from "expo-router";
import {
  ScrollView,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from "react-native";
import { useAuth } from "@/stores/useAuth";
import { useNavigation } from "@react-navigation/native";
import { Ionicons } from "@expo/vector-icons"; // Import Ionicons

export default function BaiVietDetail() {
  const { id } = useLocalSearchParams(); // Nh·∫≠n id b√†i vi·∫øt t·ª´ URL
  const { user } = useAuth();
  const navigation = useNavigation();
  const [baiViet, setBaiViet] = useState<any>(null); // D·ªØ li·ªáu b√†i vi·∫øt
  const [giangVien, setGiangVien] = useState<any>(null); // D·ªØ li·ªáu gi·∫£ng vi√™n
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Fetch b√†i vi·∫øt t·ª´ API
    fetch(`${API_BASE_URL}/baiviet/${id}`)
      .then((res) => res.json())
      .then((data) => {
        setBaiViet(data);

        // Ki·ªÉm tra n·∫øu b√†i vi·∫øt c√≥ maLHP (m√£ l·ªõp h·ªçc ph·∫ßn)
        if (data.maLHP) {
          // Fetch th√¥ng tin l·ªõp h·ªçc ph·∫ßn t·ª´ maLHP
          fetch(`${API_BASE_URL}/lophophan/${data.maLHP}`)
            .then((res) => res.json())
            .then((lhpData) => {
              // Ki·ªÉm tra n·∫øu l·ªõp h·ªçc ph·∫ßn c√≥ maGV (m√£ gi·∫£ng vi√™n)
              if (lhpData.maGV) {
                // Fetch th√¥ng tin gi·∫£ng vi√™n t·ª´ maGV
                fetch(`${API_BASE_URL}/giangvien/${lhpData.maGV}`)
                  .then((res) => res.json())
                  .then((gvData) => {
                    setGiangVien(gvData); // L∆∞u th√¥ng tin gi·∫£ng vi√™n
                  })
                  .catch((err) => console.error("L·ªói fetch gi·∫£ng vi√™n:", err));
              }
            })
            .catch((err) => console.error("L·ªói fetch l·ªõp h·ªçc ph·∫ßn:", err));
        }

        setLoading(false);
      })
      .catch((err) => {
        console.error("L·ªói fetch b√†i vi·∫øt:", err);
        setLoading(false);
      });
  }, [id]);

  if (loading) {
    return (
      <View style={styles.center}>
        <Text>ƒêang t·∫£i...</Text>
      </View>
    );
  }

  if (!baiViet) {
    return (
      <View style={styles.center}>
        <Text style={styles.errorText}>Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      {/* Thanh header v·ªõi m≈©i t√™n quay l·∫°i v√† icon ba ch·∫•m
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()} style={styles.iconWrapper}>

          <Ionicons name="arrow-back" size={24} color="black" />
        </TouchableOpacity>
        <TouchableOpacity style={styles.iconWrapper}>
          <Ionicons name="ellipsis-vertical" size={24} color="black" />
        </TouchableOpacity>
      </View> */}

      {/* Th√¥ng tin ng∆∞·ªùi ƒëƒÉng */}
      <View style={styles.postCard}>
        <View style={styles.inlineNotify}>
          <View style={styles.avatar}>
            <Text style={{ color: "#fff", fontWeight: "bold" }}>
              {giangVien ? giangVien.hoGV.charAt(0) : "H"} {/* Hi·ªÉn th·ªã ch·ªØ c√°i ƒë·∫ßu ti√™n c·ªßa gi·∫£ng vi√™n */}
            </Text>
          </View>
          <View>
            <Text style={styles.author}>
              {giangVien ? `${giangVien.hoGV} ${giangVien.tenGV}` : "Gi·∫£ng vi√™n"}
            </Text>
            <Text style={styles.date}>
              {new Date(baiViet.ngayTao).toLocaleDateString()}
            </Text>
          </View>
        </View>

        {/* ƒê∆∞·ªùng k·∫ª ngƒÉn c√°ch */}
        <View style={styles.divider} />

        {/* N·ªôi dung b√†i vi·∫øt */}
        {baiViet.noiDung.split('\n').map((line: string, index: number) => (
          <Text key={index} style={styles.content}>
            {line}
          </Text>
        ))}


        {/* ƒê∆∞·ªùng k·∫ª ngƒÉn c√°ch */}
        <View style={styles.divider} />

        {/* Nh·∫≠n x√©t */}
        <TextInput
          style={styles.commentInput}
          placeholder="Th√™m nh·∫≠n x√©t trong l·ªõp h·ªçc"
          placeholderTextColor="#2563eb"
          multiline
          autoCorrect
          autoCapitalize="sentences"
          keyboardType="default"
          textBreakStrategy="simple"
        />
      </View>

      {/* N√∫t n·ªôp b√†i n·∫øu quy·ªÅn ng∆∞·ªùi d√πng l√† sinh vi√™n */}
      {user?.quyen === 1 && baiViet.loaiBV === 1 && (
        <TouchableOpacity
          style={styles.submitButton}
          onPress={() => navigation.navigate("nopbai", { id: baiViet.id })}
        >
          <Text style={styles.submitButtonText}>üì§ N·ªôp b√†i</Text>
        </TouchableOpacity>
      )}
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: "#fff",
    flex: 1,
    padding: 12,
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
    padding: 10,
    backgroundColor: "#f1f5f9", // N·ªÅn m√†u s√°ng cho header
    alignItems: "center",
  },
  iconWrapper: {
    padding: 8,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#111827",
    marginBottom: 12,
  },
  postCard: {
    backgroundColor: "#fff", // X√≥a background m√†u tr·∫Øng trong postCard
    padding: 14,
    marginBottom: 14,
    // Kh√¥ng c√≥ vi·ªÅn v√† borderRadius n·ªØa
  },
  avatar: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: "#1d4ed8",
    alignItems: "center",
    justifyContent: "center",
    marginRight: 12,
  },
  inlineNotify: {
    flexDirection: "row",
    alignItems: "center",
  },
  author: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#111827",
  },
  date: {
    fontSize: 12,
    color: "#6b7280",
  },
  divider: {
    height: 1,
    backgroundColor: "#e5e7eb",
    marginVertical: 12,
  },
  content: {
    fontSize: 14,
    color: "#444",
    lineHeight: 20,
  },
  commentInput: {
    fontSize: 14,
    color: "#111827",
    backgroundColor: "#f9fafb",
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: "#e5e7eb",
  },
  submitButton: {
    backgroundColor: "#1A73E8",
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    alignItems: "center",
    justifyContent: "center",
    marginTop: 16,
  },
  submitButtonText: {
    color: "#FFF",
    fontWeight: "bold",
    fontSize: 16,
  },
  center: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
  },
  errorText: {
    color: "red",
    fontWeight: "bold",
  },
});
