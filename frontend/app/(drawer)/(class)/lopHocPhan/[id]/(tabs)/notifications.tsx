import { useLopHocPhan } from "@/context/_context";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useFocusEffect, router } from "expo-router";
import { useCallback, useState } from "react";
import { Alert, FlatList, StyleSheet, Text, TouchableOpacity, View, Modal, Pressable, Linking, Image } from "react-native";
import { Ionicons } from "@expo/vector-icons";
import { WebView } from "react-native-webview";  // ƒê·ªÉ hi·ªÉn th·ªã PDF
import PDFReader from 'react-native-pdf';  // N·∫øu mu·ªën s·ª≠ d·ª•ng th∆∞ vi·ªán PDF chuy√™n bi·ªát

type BaiViet = {
  id: number;
  tieuDe: string;
  noiDung: string;
  ngayTao?: string | null;
  ngayKetThuc?: string | null;
  loaiBV: number;
  maBaiViet: string;
  trangThai: number;
  duongDanFile?: string | null;
};

export default function BaiTapScreen() {
  const { id } = useLopHocPhan();
  const [tasks, setTasks] = useState<BaiViet[]>([]);
  const [showModal, setShowModal] = useState(false);

  const fetchTasks = async () => {
    try {
      const res = await fetch(`http://192.168.1.104:3000/baiviet/loai?maLHP=${id}&loaiBV=1`);
      const data = await res.json();
      setTasks(data);
    } catch (err) {
      console.error("‚ùå L·ªói khi g·ªçi API:", err);
    }
  };

  const handleDelete = (id: number) => {
    Alert.alert("X√°c nh·∫≠n x√≥a", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†i vi·∫øt n√†y?", [
      { text: "H·ªßy", style: "cancel" },
      {
        text: "X√≥a",
        style: "destructive",
        onPress: async () => {
          try {
            const token = await AsyncStorage.getItem("token");
            const res = await fetch(`http://192.168.1.104:3000/baiviet/${id}`, {
              method: "DELETE",
              headers: {
                Authorization: `Bearer ${token}`,
              },
            });

            const result = await res.json();
            if (res.ok) {
              alert("‚úÖ ƒê√£ x√≥a b√†i vi·∫øt");
              fetchTasks();
            } else {
              alert("‚ùå X√≥a th·∫•t b·∫°i: " + result.message);
            }
          } catch (err) {
            console.error("‚ùå L·ªói khi x√≥a:", err);
            alert("L·ªói k·∫øt n·ªëi");
          }
        },
      },
    ]);
  };

  useFocusEffect(
    useCallback(() => {
      fetchTasks();
    }, [id])
  );

  const handleCreate = (loaiBV: number) => {
    setShowModal(false);
    router.push(`/taobaitap?maLHP=${id}&loaiBV=${loaiBV}`);
  };

  return (
    <>
      <FlatList
        data={tasks}
        keyExtractor={(item) => item?.id?.toString()}
        renderItem={({ item }) => {
          // T·∫°o URL cho file
          const fileUrl = item.duongDanFile ? `http://192.168.1.104:3000${item.duongDanFile}` : null;

          // Ki·ªÉm tra lo·∫°i file
          const isImage = fileUrl?.match(/\.(jpg|jpeg|png)$/i);
          const isPDF = fileUrl?.match(/\.pdf$/i);
          const isDOCX = fileUrl?.match(/\.docx$/i);

          return (
            <TouchableOpacity
              onPress={() => router.push(`/baitap/${item.id}`)}
              style={styles.card}
            >
              <Text style={styles.title}>
                {item.tieuDe || "üìù Kh√¥ng c√≥ ti√™u ƒë·ªÅ"}
              </Text>
              <Text style={styles.meta}>M√£ b√†i vi·∫øt: {item.maBaiViet}</Text>
              <Text style={styles.meta}>
                Ng√†y t·∫°o: {item.ngayTao?.slice(0, 10) || "Ch∆∞a c√≥"}
              </Text>
              <Text style={styles.meta}>
                H·∫°n n·ªôp: {item.ngayKetThuc?.slice(0, 10) || "Kh√¥ng r√µ"}
              </Text>
              <Text style={styles.content}>{item.noiDung}</Text>

              {/* N·∫øu l√† ·∫£nh, hi·ªÉn th·ªã tr·ª±c ti·∫øp */}
              {isImage ? (
                <Image
                  source={{ uri: fileUrl }}
                  style={{ width: "100%", height: 200, marginTop: 12, borderRadius: 6 }}
                  resizeMode="contain"
                />
              ) : isPDF && fileUrl ? (
                             <TouchableOpacity onPress={() => Linking.openURL(fileUrl)}>
                  <Text style={{ color: 'skyblue', marginTop: 6 }}>üìé Xem PDF</Text>
                </TouchableOpacity>
              ) : isDOCX ? (
                <TouchableOpacity onPress={() => Linking.openURL(fileUrl)}>
                  <Text style={{ color: 'skyblue', marginTop: 6 }}>üìé Xem DOCX</Text>
                </TouchableOpacity>
              ) : (
                // N·∫øu l√† file kh√°c, hi·ªÉn th·ªã li√™n k·∫øt ƒë·ªÉ m·ªü
                fileUrl && (
                  <TouchableOpacity onPress={() => fileUrl && Linking.openURL(fileUrl)}>
                    <Text style={{ color: 'skyblue', marginTop: 6 }}>üìé Xem file ƒë√≠nh k√®m</Text>
                  </TouchableOpacity>
                )
              )}

              <TouchableOpacity
                style={{ marginTop: 8 }}
                onPress={() => handleDelete(item.id)}
              >
                <Text style={{ color: "red" }}>üóë X√≥a b√†i vi·∫øt</Text>
              </TouchableOpacity>
            </TouchableOpacity>
          );
        }}
      />

      {/* ‚ûï Floating Add Button */}
      <TouchableOpacity style={styles.fab} onPress={() => setShowModal(true)}>
        <Ionicons name="add-circle" size={56} color="#0ea5e9" />
      </TouchableOpacity>

      {/* Modal ch·ªçn lo·∫°i b√†i ƒëƒÉng */}
      <Modal
        visible={showModal}
        transparent
        animationType="slide"
        onRequestClose={() => setShowModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>T·∫°o</Text>

            {[
              { label: "üìù B√†i t·∫≠p", type: 1 },
              { label: "üìã B√†i ki·ªÉm tra", type: 2 },
              { label: "‚ùì C√¢u h·ªèi", type: 0 },
              { label: "üìö T√†i li·ªáu", type: 3 },
              { label: "‚ôªÔ∏è S·ª≠ d·ª•ng l·∫°i b√†i ƒëƒÉng", type: 4 },
              { label: "üè∑Ô∏è Ch·ªß ƒë·ªÅ", type: 5 },
            ].map((item, index) => (
              <Pressable
                key={index}
                style={styles.optionButton}
                onPress={() => handleCreate(item.type)}
              >
                <Text style={styles.optionText}>{item.label}</Text>
              </Pressable>
            ))}

            <TouchableOpacity onPress={() => setShowModal(false)}>
              <Text
                style={{ color: "red", marginTop: 12, textAlign: "center" }}
              >
                H·ªßy
              </Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </>
  );
}

const styles = StyleSheet.create({
  card: {
    backgroundColor: "#1e293b",
    padding: 12,
    borderRadius: 8,
    marginBottom: 12,
  },
  title: {
    color: "#fff",
    fontWeight: "bold",
    fontSize: 16,
    marginBottom: 4,
  },
  meta: {
    color: "#ccc",
    fontSize: 13,
  },
  content: {
    color: "#eee",
    marginTop: 6,
    fontSize: 14,
  },
  fab: {
    position: "absolute",
    right: 16,
    bottom: 20,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.5)",
    justifyContent: "flex-end",
  },
  modalContent: {
    backgroundColor: "#fff",
    padding: 16,
    borderTopLeftRadius: 16,
    borderTopRightRadius: 16,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: "bold",
    marginBottom: 12,
  },
  optionButton: {
    paddingVertical: 10,
  },
  optionText: {
    fontSize: 16,
  },
});
