import { useLopHocPhan } from "@/context/_context";
import { useAuth } from "@/stores/useAuth";
import { router, useFocusEffect } from "expo-router";
import { useCallback, useState } from "react";
import {
  Alert,
  Button,
  FlatList,
  Text,
  View,
  Image,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
} from "react-native";
import { BASE_URL } from "@/constants/Link";
import AsyncStorage from "@react-native-async-storage/async-storage";

type User = {
  maSV: number;
  tenSV: string;
  avatar?: string;
};

type GiangVien = {
  maGV: number;
  tenGV: string;
  avatar?: string;
};

export default function PeopleScreen() {
  const { id } = useLopHocPhan();
  const { user } = useAuth();
  const [users, setUsers] = useState<User[]>([]);
  const [giangViens, setGiangViens] = useState<GiangVien[]>([]);

  const isGV = user?.role === 1;

  // Fetch danh s√°ch gi·∫£ng vi√™n + sinh vi√™n c·ªßa l·ªõp h·ªçc ph·∫ßn
  const fetchData = async () => {
    try {
      const [gvRes, svRes] = await Promise.all([
        fetch(`${BASE_URL}/lophocphan/${id}/giangvien`).then((res) =>
          res.json()
        ),
        fetch(`${BASE_URL}/lophocphan/${id}/sinhvien`).then((res) =>
          res.json()
        ),
      ]);
      setGiangViens(gvRes || []);
      setUsers(svRes || []);
    } catch (err) {
      console.error("‚ùå L·ªói l·∫•y danh s√°ch:", err);
    }
  };

  useFocusEffect(
    useCallback(() => {
      fetchData();
    }, [id])
  );

  // Th√™m sinh vi√™n ho·∫∑c gi·∫£ng vi√™n v√†o l·ªõp (s·ª≠ d·ª•ng router push t·ªõi m√†n ri√™ng ho·∫∑c c√≥ th·ªÉ l√†m Alert.prompt/email)
  const handleAdd = (type: "sinhvien" | "giangvien") => {
    router.push(`/nguoidung/add${type}?maLHP=${id}`);
  };

  // X√≥a sinh vi√™n kh·ªèi l·ªõp
  const handleRemoveSinhVien = (maSV: number) => {
  Alert.alert("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a sinh vi√™n kh·ªèi l·ªõp?", [
    { text: "H·ªßy", style: "cancel" },
    {
      text: "X√≥a",
      style: "destructive",
      onPress: async () => {
        try {
          const token = await AsyncStorage.getItem("token");
          if (!token) {
            Alert.alert("Ch∆∞a ƒëƒÉng nh·∫≠p!");
            return;
          }
          const res = await fetch(
            `${BASE_URL}/lophocphan/${id}/remove-sinhvien`,
            {
              method: "DELETE",
              headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`,
              },
              body: JSON.stringify({ maSV }),
            }
          );
          const result = await res.json();
          if (res.ok) {
            Alert.alert("‚úÖ", "ƒê√£ xo√° sinh vi√™n");
            fetchData();
          } else {
            Alert.alert("‚ùå", result.message || "L·ªói x·∫£y ra");
          }
        } catch (err) {
          Alert.alert("‚ùå", "Kh√¥ng th·ªÉ k·∫øt n·ªëi m√°y ch·ªß");
        }
      },
    },
  ]);
};


  // X√≥a gi·∫£ng vi√™n kh·ªèi l·ªõp
  const handleRemoveGiangVien = (maGV: number) => {
  // Kh√¥ng cho ph√©p t·ª± x√≥a b·∫£n th√¢n
  if (user?.maGV === maGV) {
    Alert.alert("B·∫°n kh√¥ng th·ªÉ x√≥a ch√≠nh m√¨nh kh·ªèi l·ªõp n√†y!");
    return;
  }

  Alert.alert("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a gi·∫£ng vi√™n kh·ªèi l·ªõp?", [
    { text: "H·ªßy", style: "cancel" },
    {
      text: "X√≥a",
      style: "destructive",
      onPress: async () => {
        try {
          const token = await AsyncStorage.getItem("token");
          if (!token) {
            Alert.alert("Ch∆∞a ƒëƒÉng nh·∫≠p!");
            return;
          }
          const res = await fetch(
            `${BASE_URL}/lophocphan/${id}/remove-giangvien`,
            {
              method: "DELETE",
              headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`,
              },
              body: JSON.stringify({ maGV }),
            }
          );
          const result = await res.json();
          if (res.ok) {
            Alert.alert("‚úÖ", "ƒê√£ xo√° gi·∫£ng vi√™n");
            fetchData();
          } else {
            Alert.alert("‚ùå", result.message || "L·ªói x·∫£y ra");
          }
        } catch (err) {
          Alert.alert("‚ùå", "Kh√¥ng th·ªÉ k·∫øt n·ªëi m√°y ch·ªß");
        }
      },
    },
  ]);
};


  return (
    <ScrollView style={styles.container}>
      {/* Danh s√°ch gi·∫£ng vi√™n */}
      <View style={styles.card}>
        <Text style={styles.cardTitle}>üë®‚Äçüè´ Gi·∫£ng vi√™n:</Text>
        {giangViens.length === 0 ? (
          <Text style={styles.noDataText}>
            Ch∆∞a c√≥ gi·∫£ng vi√™n trong l·ªõp h·ªçc ph·∫ßn n√†y.
          </Text>
        ) : (
          giangViens.map((gv) => (
            <View key={gv.maGV} style={styles.giangVienCard}>
              <Image
                source={{
                  uri: gv.avatar || "https://i.pravatar.cc/300?u=gv" + gv.maGV,
                }}
                style={styles.avatar}
              />
              <Text style={styles.userName}>{gv.tenGV}</Text>
              {isGV && (
                <TouchableOpacity
                  style={styles.removeButton}
                  onPress={() => handleRemoveGiangVien(gv.maGV)}
                >
                  <Text style={styles.removeButtonText}>‚ùå</Text>
                </TouchableOpacity>
              )}
            </View>
          ))
        )}
      </View>

      {/* N√∫t th√™m gi·∫£ng vi√™n/sinh vi√™n */}
      {isGV && (
        <View style={styles.buttonContainer}>
          <Button
            title="üì® M·ªùi gi·∫£ng vi√™n"
            onPress={() => handleAdd("giangvien")}
            color="#4666ec"
          />
          <Button
            title="üì® M·ªùi sinh vi√™n"
            onPress={() => handleAdd("sinhvien")}
            color="#00bcd4"
          />
        </View>
      )}

      {/* Danh s√°ch sinh vi√™n */}
      <Text style={[styles.cardTitle, { marginBottom: 8 }]}>üë• Sinh vi√™n:</Text>
      {users.length === 0 ? (
        <Text style={styles.noDataText}>
          Kh√¥ng c√≥ sinh vi√™n n√†o trong l·ªõp h·ªçc ph·∫ßn n√†y.
        </Text>
      ) : (
        users.map((item) => (
          <View key={item.maSV} style={styles.userCard}>
            <Image
              source={{
                uri: item.avatar || "https://i.pravatar.cc/300?u=" + item.maSV,
              }}
              style={styles.avatar}
            />
            <View style={styles.userInfo}>
              <Text style={styles.userName}>{item.tenSV}</Text>
              <Text style={styles.userId}>M√£ SV: {item.maSV}</Text>
            </View>
            {isGV && (
              <TouchableOpacity
                style={styles.removeButton}
                onPress={() => handleRemoveSinhVien(item.maSV)}
              >
                <Text style={styles.removeButtonText}>‚ùå Xo√°</Text>
              </TouchableOpacity>
            )}
          </View>
        ))
      )}
      {/* L∆∞u √Ω: N·∫øu sinh vi√™n nhi·ªÅu, ƒë·ªïi sang FlatList (t∆∞∆°ng t·ª± c≈©) */}
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    padding: 16,
    backgroundColor: "#fff",
    flex: 1,
  },
  card: {
    marginBottom: 20,
    backgroundColor: "#1f2937",
    padding: 12,
    borderRadius: 8,
  },
  cardTitle: {
    color: "#aaa",
    fontWeight: "bold",
    fontSize: 16,
    marginBottom: 4,
  },
  cardText: {
    color: "#ccc",
  },
  buttonContainer: {
    gap: 12,
    marginBottom: 12,
  },
  noDataText: {
    color: "#888",
    marginBottom: 8,
  },
  userCard: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#2a2a2a",
    padding: 10,
    marginBottom: 8,
    borderRadius: 6,
  },
  giangVienCard: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 6,
  },
  avatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    marginRight: 12,
    backgroundColor: "#444",
  },
  userInfo: {
    flex: 1,
  },
  userName: {
    color: "#fff",
    fontWeight: "bold",
  },
  userId: {
    color: "#aaa",
  },
  removeButton: {
    backgroundColor: "#e57373",
    borderRadius: 6,
    paddingVertical: 4,
    paddingHorizontal: 10,
    marginLeft: 8,
  },
  removeButtonText: {
    color: "#fff",
  },
});
